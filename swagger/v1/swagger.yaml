---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/v1/hotels":
    get:
      summary: get list of hotels
      description: Based on limit and offset it returns list of hotels. It returns
        maximum of 100 hotels in one request. If limit is not given it returns 10
        hotels if present.
      tags:
      - Hotel
      parameters:
      - name: limit
        in: query
        schema:
          type: integer
      - name: offset
        in: query
        schema:
          type: integer
      - name: token
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        address:
                          type: object
                          properties:
                            city:
                              type: string
                            complement:
                              type: string
                              nullable: true
                            country:
                              type: string
                            id:
                              type: integer
                            neighbourhood:
                              type: string
                            number:
                              type: integer
                            state:
                              type: string
                            street:
                              type: string
                        description:
                          type: string
                        feature:
                          type: object
                          properties:
                            air_conditioning:
                              type: boolean
                            bar:
                              type: boolean
                            gym:
                              type: boolean
                            id:
                              type: integer
                            pool:
                              type: boolean
                            room:
                              type: integer
                            tv:
                              type: boolean
                        id:
                          type: integer
                        name:
                          type: string
                        user_id:
                          type: integer
                        image_path:
                          type: string
                required:
                - data
        '500':
          description: Invalid Token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
    post:
      summary: create hotel
      description: Add new hotel based on information
      tags:
      - Hotel
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Hotel Added
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                - message
        '500':
          description: Invalid Token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
        '501':
          description: Unable to save to database
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  error_list:
                    type: array
                    items:
                      type: string
                required:
                - error
                - error_list
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hotel:
                  type: object
                  properties:
                    name:
                      type: string
                    description:
                      type: string
                    room:
                      type: integer
                    pool:
                      type: boolean
                    bar:
                      type: boolean
                    air_conditioning:
                      type: boolean
                    tv:
                      type: boolean
                    gym:
                      type: boolean
                    country:
                      type: string
                    state:
                      type: string
                    city:
                      type: string
                    neighbourhood:
                      type: string
                    street:
                      type: string
                    number:
                      type: integer
                    complement:
                      type: string
                  required:
                  - name
                  - description
                  - room
                  - pool
                  - bar
                  - air_conditioning
                  - tv
                  - gym
                  - country
                  - state
                  - city
                  - neighbourhood
                  - street
                  - number
  "/v1/login/{name}":
    get:
      summary: Logs user in
      description: Logs the user based on user name if the user exists.
      tags:
      - Login Route
      parameters:
      - name: name
        in: path
        description: Name of registered user
        required: true
        schema:
          type: string
      responses:
        '200':
          description: User Present in database
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '404':
          description: User does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
  "/v1/register":
    post:
      summary: register user
      tags:
      - Register
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                - message
        '500':
          description: error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
                required:
                - message
                - error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    name:
                      type: string
                  required:
                  - name
  "/v1/reservation":
    get:
      summary: list reservations
      description: get reservation list for user
      tags:
      - Reservations
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservations:
                    type: array
                    items:
                      type: object
                      properties:
                        reserved_rooms:
                          type: integer
                        hotel_id:
                          type: integer
                        start_date:
                          type: string
                        end_date:
                          type: string
        '500':
          description: Invalid Token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
    post:
      summary: create reservation
      description: Create reservation for user
      tags:
      - Reservations
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                - message
        '501':
          description: Unable to create reservation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  error_list:
                    type: array
                    items:
                      type: string
                required:
                - error
                - error_list
        '500':
          description: Invalid Token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reservation:
                  type: object
                  properties:
                    reserved_rooms:
                      type: integer
                    hotel_id:
                      type: integer
                    start_date:
                      type: string
                    end_date:
                      type: string
                  required:
                  - reserved_rooms
                  - hotel_id
                  - start_date
                  - end_date
  "/v1/reservation/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: integer
    delete:
      summary: delete reservation
      description: Create reservation for user
      tags:
      - Reservations
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                - message
        '500':
          description: Invalid Token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
servers:
- url: https://{defaultHost}
  variables:
    defaultHost:
      default: rails-hotels-api.herokuapp.com/
